import { GetServerSideProps } from "next";
import { signIn, getSession } from "next-auth/react";
import { useRouter } from "next/router";
import React, { useEffect } from "react";
import Head from "next/head";
import LoginComponent from "../components/Login";
import { Container, Title, Text, Anchor } from "@mantine/core";
import { LoginPageProps } from "../types/interfaces";
import { getLastRoute } from "../utils/appHandles";
import Link from "next/link";

export default function LoginPage({ session }: LoginPageProps) {
    const router = useRouter();

    console.log(session);

    useEffect(() => {
        if (router && router.query) {
            handleSession();
        }
    }, [router]);

    const handleLogin = (
        username: string,
        password: string,
        remember: boolean
    ) => {
        signIn("credentials", {
            username: username,
            password: password,
        });
    };

    const handleSession = () => {
        if (
            session &&
            session.status === "authorized" &&
            router.query &&
            router.query.from
        ) {
            let route = getLastRoute(router);
            router.push(route);
            return;
        }
        if (session && session.status === "authorized") router.push("/");
    };

    // append head with: | {host}
    return (
        <>
            <Head>
                <title>Login</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Container size={420} my={40}>
                <Title
                    align="center"
                    sx={(theme) => ({
                        fontFamily: `Greycliff CF, ${theme.fontFamily}`,
                        fontWeight: 900,
                    })}
                >
                    Welcome back!
                </Title>
                <LoginComponent loginHandler={handleLogin} />
                {session?.status === "unauthorized" ? (
                    <Title>Error on Login</Title>
                ) : (
                    <></>
                )}
                <Text color="dimmed" size="sm" align="center" mt={5}>
                    Don't want to login?{" "}
                    <Link href="/">
                        <Anchor<"a"> size="sm" href="/">
                            Back to Home
                        </Anchor>
                    </Link>
                </Text>
            </Container>
        </>
    );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
    return {
        props: {
            session: await getSession(context),
        },
    };
};
